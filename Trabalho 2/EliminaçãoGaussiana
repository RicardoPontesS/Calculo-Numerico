import numpy as np

def eliminacao_gaussiana(matriz_coeficientes, vetor_livre):
    n = len(vetor_livre)
    matriz_coeficientes = matriz_coeficientes.astype(float)  

    # Etapa de eliminação
    for i in range(n):
        for j in range(i + 1, n):
            if matriz_coeficientes[j, i] != 0:
                # Calcula o fator de multiplicação para zerar o elemento abaixo da diagonal
                fator = matriz_coeficientes[j, i] / matriz_coeficientes[i, i]
                # Atualiza a linha j da matriz e o elemento j do vetor livre
                matriz_coeficientes[j, i + 1:] -= fator * matriz_coeficientes[i, i + 1:]
                vetor_livre[j] -= fator * vetor_livre[i]

    # Etapa de retrosubstituição
    solucao = np.zeros(n)
    for i in range(n - 1, -1, -1):
        # Calcula a solução a partir da parte triangular superior da matriz e do vetor livre
        solucao[i] = (vetor_livre[i] - np.dot(matriz_coeficientes[i, i + 1:], solucao[i + 1:])) / matriz_coeficientes[
            i, i]

    return solucao


matriz_coeficientes = np.array([[1, 0, 0, 0, 0],
                                [5, 34, 12, 0, 0],
                                [0, 12, 52, 14, 0],
                                [0, 0, 14, 30, 1],
                                [0, 0, 0, 0, 1]])

vetor_livre = np.array([0, -3.36 / 20, 2.28 / 28, 4.32 / 14, 0])

solucao = eliminacao_gaussiana(matriz_coeficientes, vetor_livre)
print("Solução do sistema:")
print(solucao)
