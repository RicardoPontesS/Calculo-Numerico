import numpy as np

A = np.array([[1, 0, 0, 0, 0],
              [5, 34, 12, 0, 0],
              [0, 12, 52, 14, 0],
              [0, 0, 14, 30, 1],
              [0, 0, 0, 0, 1]])

b = np.array([[0],
              [(-3.36)/(20)],
              [(2.28)/(28)],
              [(4.32)/(14)],
              [0]])

# Número máximo de iterações
max_iter = 100

# Tolerância para convergência
tolerance = 1e-7

# Inicialização do vetor de solução
x = np.zeros_like(b)

# Iterações do método de Gauss-Jacobi
for iteration in range(max_iter):
    x_new = np.zeros_like(x)
    for i in range(len(b)):
        x_new[i] = (b[i] - np.dot(A[i, :i], x[:i]) - np.dot(A[i, i+1:], x[i+1:])) / A[i, i]
    if np.all(np.abs(x - x_new) < tolerance):
        break
    x = x_new


print("Solução aproximada:")
print(x)
